package com.atet.tvmarket.entity.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.atet.tvmarket.entity.dao.GameGiftInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GAME_GIFT_INFO.
*/
public class GameGiftInfoDao extends AbstractDao<GameGiftInfo, String> {

    public static final String TABLENAME = "GAME_GIFT_INFO";

    /**
     * Properties of entity GameGiftInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Gameid = new Property(0, String.class, "gameid", true, "GAMEID");
        public final static Property GameName = new Property(1, String.class, "gameName", false, "GAME_NAME");
        public final static Property MaxPhoto = new Property(2, String.class, "maxPhoto", false, "MAX_PHOTO");
        public final static Property MinPhoto = new Property(3, String.class, "minPhoto", false, "MIN_PHOTO");
        public final static Property SortNum = new Property(4, Integer.class, "sortNum", false, "SORT_NUM");
    };

    private DaoSession daoSession;


    public GameGiftInfoDao(DaoConfig config) {
        super(config);
    }
    
    public GameGiftInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GAME_GIFT_INFO' (" + //
                "'GAMEID' TEXT PRIMARY KEY NOT NULL ," + // 0: gameid
                "'GAME_NAME' TEXT," + // 1: gameName
                "'MAX_PHOTO' TEXT," + // 2: maxPhoto
                "'MIN_PHOTO' TEXT," + // 3: minPhoto
                "'SORT_NUM' INTEGER);"); // 4: sortNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GAME_GIFT_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GameGiftInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getGameid());
 
        String gameName = entity.getGameName();
        if (gameName != null) {
            stmt.bindString(2, gameName);
        }
 
        String maxPhoto = entity.getMaxPhoto();
        if (maxPhoto != null) {
            stmt.bindString(3, maxPhoto);
        }
 
        String minPhoto = entity.getMinPhoto();
        if (minPhoto != null) {
            stmt.bindString(4, minPhoto);
        }
 
        Integer sortNum = entity.getSortNum();
        if (sortNum != null) {
            stmt.bindLong(5, sortNum);
        }
    }

    @Override
    protected void attachEntity(GameGiftInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GameGiftInfo readEntity(Cursor cursor, int offset) {
        GameGiftInfo entity = new GameGiftInfo( //
            cursor.getString(offset + 0), // gameid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // gameName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // maxPhoto
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // minPhoto
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // sortNum
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GameGiftInfo entity, int offset) {
        entity.setGameid(cursor.getString(offset + 0));
        entity.setGameName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMaxPhoto(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMinPhoto(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSortNum(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(GameGiftInfo entity, long rowId) {
        return entity.getGameid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(GameGiftInfo entity) {
        if(entity != null) {
            return entity.getGameid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
