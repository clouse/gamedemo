package com.atet.tvmarket.entity.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import com.atet.tvmarket.entity.dao.GameInfoDao;
import com.atet.tvmarket.entity.dao.ScreenShotInfoDao;
import com.atet.tvmarket.entity.dao.ThirdGameInfoDao;
import com.atet.tvmarket.entity.dao.ThirdGameDownInfoDao;
import com.atet.tvmarket.entity.dao.GameTypeInfoDao;
import com.atet.tvmarket.entity.dao.TypeToGameDao;
import com.atet.tvmarket.entity.dao.GameTopicInfoDao;
import com.atet.tvmarket.entity.dao.TopicToGameDao;
import com.atet.tvmarket.entity.dao.NewUploadToGameDao;
import com.atet.tvmarket.entity.dao.GameRankingDao;
import com.atet.tvmarket.entity.dao.GameSearchPinyinInfoDao;
import com.atet.tvmarket.entity.dao.AdInfoDao;
import com.atet.tvmarket.entity.dao.ActionUrlDao;
import com.atet.tvmarket.entity.dao.ExtramapDao;
import com.atet.tvmarket.entity.dao.AdModelInfoDao;
import com.atet.tvmarket.entity.dao.ModelToAdDao;
import com.atet.tvmarket.entity.dao.ActInfoDao;
import com.atet.tvmarket.entity.dao.ActDetailPhotoDao;
import com.atet.tvmarket.entity.dao.GoodsInfoDao;
import com.atet.tvmarket.entity.dao.GoodsDetailPhotoDao;
import com.atet.tvmarket.entity.dao.GameGiftInfoDao;
import com.atet.tvmarket.entity.dao.GiftInfoDao;
import com.atet.tvmarket.entity.dao.UserGameGiftInfoDao;
import com.atet.tvmarket.entity.dao.UserGiftInfoDao;
import com.atet.tvmarket.entity.dao.UserGameToGiftDao;
import com.atet.tvmarket.entity.dao.NoticeInfoDao;
import com.atet.tvmarket.entity.dao.VideoInfoDao;
import com.atet.tvmarket.entity.dao.GameScoreRecordInfoDao;
import com.atet.tvmarket.entity.dao.UserTaskRecordDao;
import com.atet.tvmarket.entity.dao.UpdateInterfaceInfoDao;
import com.atet.tvmarket.entity.dao.LocalUpdateInfoDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 1013): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1013;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        GameInfoDao.createTable(db, ifNotExists);
        ScreenShotInfoDao.createTable(db, ifNotExists);
        ThirdGameInfoDao.createTable(db, ifNotExists);
        ThirdGameDownInfoDao.createTable(db, ifNotExists);
        GameTypeInfoDao.createTable(db, ifNotExists);
        TypeToGameDao.createTable(db, ifNotExists);
        GameTopicInfoDao.createTable(db, ifNotExists);
        TopicToGameDao.createTable(db, ifNotExists);
        NewUploadToGameDao.createTable(db, ifNotExists);
        GameRankingDao.createTable(db, ifNotExists);
        GameSearchPinyinInfoDao.createTable(db, ifNotExists);
        AdInfoDao.createTable(db, ifNotExists);
        ActionUrlDao.createTable(db, ifNotExists);
        ExtramapDao.createTable(db, ifNotExists);
        AdModelInfoDao.createTable(db, ifNotExists);
        ModelToAdDao.createTable(db, ifNotExists);
        ActInfoDao.createTable(db, ifNotExists);
        ActDetailPhotoDao.createTable(db, ifNotExists);
        GoodsInfoDao.createTable(db, ifNotExists);
        GoodsDetailPhotoDao.createTable(db, ifNotExists);
        GameGiftInfoDao.createTable(db, ifNotExists);
        GiftInfoDao.createTable(db, ifNotExists);
        UserGameGiftInfoDao.createTable(db, ifNotExists);
        UserGiftInfoDao.createTable(db, ifNotExists);
        UserGameToGiftDao.createTable(db, ifNotExists);
        NoticeInfoDao.createTable(db, ifNotExists);
        VideoInfoDao.createTable(db, ifNotExists);
        GameScoreRecordInfoDao.createTable(db, ifNotExists);
        UserTaskRecordDao.createTable(db, ifNotExists);
        UpdateInterfaceInfoDao.createTable(db, ifNotExists);
        LocalUpdateInfoDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        GameInfoDao.dropTable(db, ifExists);
        ScreenShotInfoDao.dropTable(db, ifExists);
        ThirdGameInfoDao.dropTable(db, ifExists);
        ThirdGameDownInfoDao.dropTable(db, ifExists);
        GameTypeInfoDao.dropTable(db, ifExists);
        TypeToGameDao.dropTable(db, ifExists);
        GameTopicInfoDao.dropTable(db, ifExists);
        TopicToGameDao.dropTable(db, ifExists);
        NewUploadToGameDao.dropTable(db, ifExists);
        GameRankingDao.dropTable(db, ifExists);
        GameSearchPinyinInfoDao.dropTable(db, ifExists);
        AdInfoDao.dropTable(db, ifExists);
        ActionUrlDao.dropTable(db, ifExists);
        ExtramapDao.dropTable(db, ifExists);
        AdModelInfoDao.dropTable(db, ifExists);
        ModelToAdDao.dropTable(db, ifExists);
        ActInfoDao.dropTable(db, ifExists);
        ActDetailPhotoDao.dropTable(db, ifExists);
        GoodsInfoDao.dropTable(db, ifExists);
        GoodsDetailPhotoDao.dropTable(db, ifExists);
        GameGiftInfoDao.dropTable(db, ifExists);
        GiftInfoDao.dropTable(db, ifExists);
        UserGameGiftInfoDao.dropTable(db, ifExists);
        UserGiftInfoDao.dropTable(db, ifExists);
        UserGameToGiftDao.dropTable(db, ifExists);
        NoticeInfoDao.dropTable(db, ifExists);
        VideoInfoDao.dropTable(db, ifExists);
        GameScoreRecordInfoDao.dropTable(db, ifExists);
        UserTaskRecordDao.dropTable(db, ifExists);
        UpdateInterfaceInfoDao.dropTable(db, ifExists);
        LocalUpdateInfoDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(GameInfoDao.class);
        registerDaoClass(ScreenShotInfoDao.class);
        registerDaoClass(ThirdGameInfoDao.class);
        registerDaoClass(ThirdGameDownInfoDao.class);
        registerDaoClass(GameTypeInfoDao.class);
        registerDaoClass(TypeToGameDao.class);
        registerDaoClass(GameTopicInfoDao.class);
        registerDaoClass(TopicToGameDao.class);
        registerDaoClass(NewUploadToGameDao.class);
        registerDaoClass(GameRankingDao.class);
        registerDaoClass(GameSearchPinyinInfoDao.class);
        registerDaoClass(AdInfoDao.class);
        registerDaoClass(ActionUrlDao.class);
        registerDaoClass(ExtramapDao.class);
        registerDaoClass(AdModelInfoDao.class);
        registerDaoClass(ModelToAdDao.class);
        registerDaoClass(ActInfoDao.class);
        registerDaoClass(ActDetailPhotoDao.class);
        registerDaoClass(GoodsInfoDao.class);
        registerDaoClass(GoodsDetailPhotoDao.class);
        registerDaoClass(GameGiftInfoDao.class);
        registerDaoClass(GiftInfoDao.class);
        registerDaoClass(UserGameGiftInfoDao.class);
        registerDaoClass(UserGiftInfoDao.class);
        registerDaoClass(UserGameToGiftDao.class);
        registerDaoClass(NoticeInfoDao.class);
        registerDaoClass(VideoInfoDao.class);
        registerDaoClass(GameScoreRecordInfoDao.class);
        registerDaoClass(UserTaskRecordDao.class);
        registerDaoClass(UpdateInterfaceInfoDao.class);
        registerDaoClass(LocalUpdateInfoDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
