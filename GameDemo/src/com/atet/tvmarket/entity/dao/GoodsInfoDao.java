package com.atet.tvmarket.entity.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.atet.tvmarket.entity.dao.GoodsInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GOODS_INFO.
*/
public class GoodsInfoDao extends AbstractDao<GoodsInfo, String> {

    public static final String TABLENAME = "GOODS_INFO";

    /**
     * Properties of entity GoodsInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property GoodsId = new Property(0, String.class, "goodsId", true, "GOODS_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Remark = new Property(2, String.class, "remark", false, "REMARK");
        public final static Property StartTime = new Property(3, Long.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(4, Long.class, "endTime", false, "END_TIME");
        public final static Property Rules = new Property(5, String.class, "rules", false, "RULES");
        public final static Property Prize = new Property(6, String.class, "prize", false, "PRIZE");
        public final static Property Photo = new Property(7, String.class, "photo", false, "PHOTO");
        public final static Property ErectPhoto = new Property(8, String.class, "erectPhoto", false, "ERECT_PHOTO");
        public final static Property SquarePhoto = new Property(9, String.class, "squarePhoto", false, "SQUARE_PHOTO");
        public final static Property Video = new Property(10, String.class, "video", false, "VIDEO");
        public final static Property Thumbnail = new Property(11, String.class, "thumbnail", false, "THUMBNAIL");
        public final static Property Url = new Property(12, String.class, "url", false, "URL");
        public final static Property Recommend = new Property(13, Integer.class, "recommend", false, "RECOMMEND");
        public final static Property GameId = new Property(14, String.class, "gameId", false, "GAME_ID");
        public final static Property PackgeName = new Property(15, String.class, "packgeName", false, "PACKGE_NAME");
        public final static Property Number = new Property(16, Integer.class, "number", false, "NUMBER");
        public final static Property CreateTime = new Property(17, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(18, Long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property Integral = new Property(19, Integer.class, "integral", false, "INTEGRAL");
        public final static Property Price = new Property(20, Integer.class, "price", false, "PRICE");
        public final static Property IsDiscount = new Property(21, Integer.class, "isDiscount", false, "IS_DISCOUNT");
        public final static Property Discount = new Property(22, Double.class, "discount", false, "DISCOUNT");
        public final static Property Amount = new Property(23, Integer.class, "amount", false, "AMOUNT");
        public final static Property Surplus = new Property(24, Integer.class, "surplus", false, "SURPLUS");
        public final static Property Title = new Property(25, String.class, "title", false, "TITLE");
        public final static Property ConvertNum = new Property(26, Integer.class, "convertNum", false, "CONVERT_NUM");
        public final static Property QrCode = new Property(27, String.class, "qrCode", false, "QR_CODE");
        public final static Property Caption = new Property(28, String.class, "caption", false, "CAPTION");
    };

    private DaoSession daoSession;


    public GoodsInfoDao(DaoConfig config) {
        super(config);
    }
    
    public GoodsInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GOODS_INFO' (" + //
                "'GOODS_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: goodsId
                "'NAME' TEXT," + // 1: name
                "'REMARK' TEXT," + // 2: remark
                "'START_TIME' INTEGER," + // 3: startTime
                "'END_TIME' INTEGER," + // 4: endTime
                "'RULES' TEXT," + // 5: rules
                "'PRIZE' TEXT," + // 6: prize
                "'PHOTO' TEXT," + // 7: photo
                "'ERECT_PHOTO' TEXT," + // 8: erectPhoto
                "'SQUARE_PHOTO' TEXT," + // 9: squarePhoto
                "'VIDEO' TEXT," + // 10: video
                "'THUMBNAIL' TEXT," + // 11: thumbnail
                "'URL' TEXT," + // 12: url
                "'RECOMMEND' INTEGER," + // 13: recommend
                "'GAME_ID' TEXT," + // 14: gameId
                "'PACKGE_NAME' TEXT," + // 15: packgeName
                "'NUMBER' INTEGER," + // 16: number
                "'CREATE_TIME' INTEGER," + // 17: createTime
                "'UPDATE_TIME' INTEGER," + // 18: updateTime
                "'INTEGRAL' INTEGER," + // 19: integral
                "'PRICE' INTEGER," + // 20: price
                "'IS_DISCOUNT' INTEGER," + // 21: isDiscount
                "'DISCOUNT' REAL," + // 22: discount
                "'AMOUNT' INTEGER," + // 23: amount
                "'SURPLUS' INTEGER," + // 24: surplus
                "'TITLE' TEXT," + // 25: title
                "'CONVERT_NUM' INTEGER," + // 26: convertNum
                "'QR_CODE' TEXT," + // 27: qrCode
                "'CAPTION' TEXT);"); // 28: caption
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GOODS_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GoodsInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getGoodsId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(3, remark);
        }
 
        Long startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(4, startTime);
        }
 
        Long endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(5, endTime);
        }
 
        String rules = entity.getRules();
        if (rules != null) {
            stmt.bindString(6, rules);
        }
 
        String prize = entity.getPrize();
        if (prize != null) {
            stmt.bindString(7, prize);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(8, photo);
        }
 
        String erectPhoto = entity.getErectPhoto();
        if (erectPhoto != null) {
            stmt.bindString(9, erectPhoto);
        }
 
        String squarePhoto = entity.getSquarePhoto();
        if (squarePhoto != null) {
            stmt.bindString(10, squarePhoto);
        }
 
        String video = entity.getVideo();
        if (video != null) {
            stmt.bindString(11, video);
        }
 
        String thumbnail = entity.getThumbnail();
        if (thumbnail != null) {
            stmt.bindString(12, thumbnail);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(13, url);
        }
 
        Integer recommend = entity.getRecommend();
        if (recommend != null) {
            stmt.bindLong(14, recommend);
        }
 
        String gameId = entity.getGameId();
        if (gameId != null) {
            stmt.bindString(15, gameId);
        }
 
        String packgeName = entity.getPackgeName();
        if (packgeName != null) {
            stmt.bindString(16, packgeName);
        }
 
        Integer number = entity.getNumber();
        if (number != null) {
            stmt.bindLong(17, number);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(18, createTime);
        }
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(19, updateTime);
        }
 
        Integer integral = entity.getIntegral();
        if (integral != null) {
            stmt.bindLong(20, integral);
        }
 
        Integer price = entity.getPrice();
        if (price != null) {
            stmt.bindLong(21, price);
        }
 
        Integer isDiscount = entity.getIsDiscount();
        if (isDiscount != null) {
            stmt.bindLong(22, isDiscount);
        }
 
        Double discount = entity.getDiscount();
        if (discount != null) {
            stmt.bindDouble(23, discount);
        }
 
        Integer amount = entity.getAmount();
        if (amount != null) {
            stmt.bindLong(24, amount);
        }
 
        Integer surplus = entity.getSurplus();
        if (surplus != null) {
            stmt.bindLong(25, surplus);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(26, title);
        }
 
        Integer convertNum = entity.getConvertNum();
        if (convertNum != null) {
            stmt.bindLong(27, convertNum);
        }
 
        String qrCode = entity.getQrCode();
        if (qrCode != null) {
            stmt.bindString(28, qrCode);
        }
 
        String caption = entity.getCaption();
        if (caption != null) {
            stmt.bindString(29, caption);
        }
    }

    @Override
    protected void attachEntity(GoodsInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GoodsInfo readEntity(Cursor cursor, int offset) {
        GoodsInfo entity = new GoodsInfo( //
            cursor.getString(offset + 0), // goodsId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // remark
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // startTime
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // endTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // rules
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // prize
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // photo
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // erectPhoto
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // squarePhoto
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // video
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // thumbnail
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // url
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // recommend
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // gameId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // packgeName
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // number
            cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17), // createTime
            cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18), // updateTime
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // integral
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // price
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // isDiscount
            cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22), // discount
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // amount
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // surplus
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // title
            cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26), // convertNum
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // qrCode
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28) // caption
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GoodsInfo entity, int offset) {
        entity.setGoodsId(cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRemark(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStartTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setEndTime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setRules(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPrize(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhoto(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setErectPhoto(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSquarePhoto(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setVideo(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setThumbnail(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUrl(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRecommend(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setGameId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPackgeName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setNumber(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setCreateTime(cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17));
        entity.setUpdateTime(cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18));
        entity.setIntegral(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setPrice(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setIsDiscount(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setDiscount(cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22));
        entity.setAmount(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setSurplus(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setTitle(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setConvertNum(cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26));
        entity.setQrCode(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setCaption(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(GoodsInfo entity, long rowId) {
        return entity.getGoodsId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(GoodsInfo entity) {
        if(entity != null) {
            return entity.getGoodsId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
