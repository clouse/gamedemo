package com.atet.tvmarket.entity.dao;

import com.atet.tvmarket.entity.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table THIRD_GAME_DOWN_INFO.
 */
public class ThirdGameDownInfo implements java.io.Serializable {

    private Long id;
    private String gameURLId;
    private String url;
    private Integer downToken;
    private String remark;
    private String logoUrl;
    /** Not-null value. */
    private String gameId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ThirdGameDownInfoDao myDao;

    private ThirdGameInfo thirdGameInfo;
    private String thirdGameInfo__resolvedKey;


    // KEEP FIELDS - put your custom fields here
	private static final long serialVersionUID = 1L;
    // KEEP FIELDS END

    public ThirdGameDownInfo() {
    }

    public ThirdGameDownInfo(Long id) {
        this.id = id;
    }

    public ThirdGameDownInfo(Long id, String gameURLId, String url, Integer downToken, String remark, String logoUrl, String gameId) {
        this.id = id;
        this.gameURLId = gameURLId;
        this.url = url;
        this.downToken = downToken;
        this.remark = remark;
        this.logoUrl = logoUrl;
        this.gameId = gameId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getThirdGameDownInfoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getGameURLId() {
        return gameURLId;
    }

    public void setGameURLId(String gameURLId) {
        this.gameURLId = gameURLId;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public Integer getDownToken() {
        return downToken;
    }

    public void setDownToken(Integer downToken) {
        this.downToken = downToken;
    }

    public String getRemark() {
        return remark;
    }

    public void setRemark(String remark) {
        this.remark = remark;
    }

    public String getLogoUrl() {
        return logoUrl;
    }

    public void setLogoUrl(String logoUrl) {
        this.logoUrl = logoUrl;
    }

    /** Not-null value. */
    public String getGameId() {
        return gameId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setGameId(String gameId) {
        this.gameId = gameId;
    }

    /** To-one relationship, resolved on first access. */
    public ThirdGameInfo getThirdGameInfo() {
        String __key = this.gameId;
        if (thirdGameInfo__resolvedKey == null || thirdGameInfo__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ThirdGameInfoDao targetDao = daoSession.getThirdGameInfoDao();
            ThirdGameInfo thirdGameInfoNew = targetDao.load(__key);
            synchronized (this) {
                thirdGameInfo = thirdGameInfoNew;
            	thirdGameInfo__resolvedKey = __key;
            }
        }
        return thirdGameInfo;
    }

    public void setThirdGameInfo(ThirdGameInfo thirdGameInfo) {
        if (thirdGameInfo == null) {
            throw new DaoException("To-one property 'gameId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.thirdGameInfo = thirdGameInfo;
            gameId = thirdGameInfo.getGameId();
            thirdGameInfo__resolvedKey = gameId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
	@Override
	public String toString() {
		return "ThirdGameDownInfo [id=" + id + ", gameURLId=" + gameURLId
				+ ", url=" + url + ", downToken=" + downToken + ", remark="
				+ remark + ", logoUrl=" + logoUrl + ", gameId=" + gameId
				+ ", thirdGameInfo=" + thirdGameInfo + "]";
	}
    // KEEP METHODS END

}
