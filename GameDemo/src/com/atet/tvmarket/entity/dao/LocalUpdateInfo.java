package com.atet.tvmarket.entity.dao;

import com.atet.tvmarket.entity.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table LOCAL_UPDATE_INFO.
 */
public class LocalUpdateInfo implements java.io.Serializable {

    private String localUniqueId;
    private String localName;
    private String localSubId;
    private Long localUpdateTime;
    private Integer localState;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient LocalUpdateInfoDao myDao;

    private UpdateInterfaceInfo updateInterfaceInfo;
    private String updateInterfaceInfo__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public LocalUpdateInfo() {
    }

    public LocalUpdateInfo(String localUniqueId) {
        this.localUniqueId = localUniqueId;
    }

    public LocalUpdateInfo(String localUniqueId, String localName, String localSubId, Long localUpdateTime, Integer localState) {
        this.localUniqueId = localUniqueId;
        this.localName = localName;
        this.localSubId = localSubId;
        this.localUpdateTime = localUpdateTime;
        this.localState = localState;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLocalUpdateInfoDao() : null;
    }

    public String getLocalUniqueId() {
        return localUniqueId;
    }

    public void setLocalUniqueId(String localUniqueId) {
        this.localUniqueId = localUniqueId;
    }

    public String getLocalName() {
        return localName;
    }

    public void setLocalName(String localName) {
        this.localName = localName;
    }

    public String getLocalSubId() {
        return localSubId;
    }

    public void setLocalSubId(String localSubId) {
        this.localSubId = localSubId;
    }

    public Long getLocalUpdateTime() {
        return localUpdateTime;
    }

    public void setLocalUpdateTime(Long localUpdateTime) {
        this.localUpdateTime = localUpdateTime;
    }

    public Integer getLocalState() {
        return localState;
    }

    public void setLocalState(Integer localState) {
        this.localState = localState;
    }

    /** To-one relationship, resolved on first access. */
    public UpdateInterfaceInfo getUpdateInterfaceInfo() {
        String __key = this.localUniqueId;
        if (updateInterfaceInfo__resolvedKey == null || updateInterfaceInfo__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UpdateInterfaceInfoDao targetDao = daoSession.getUpdateInterfaceInfoDao();
            UpdateInterfaceInfo updateInterfaceInfoNew = targetDao.load(__key);
            synchronized (this) {
                updateInterfaceInfo = updateInterfaceInfoNew;
            	updateInterfaceInfo__resolvedKey = __key;
            }
        }
        return updateInterfaceInfo;
    }

    public void setUpdateInterfaceInfo(UpdateInterfaceInfo updateInterfaceInfo) {
        synchronized (this) {
            this.updateInterfaceInfo = updateInterfaceInfo;
            localUniqueId = updateInterfaceInfo == null ? null : updateInterfaceInfo.getUniqueId();
            updateInterfaceInfo__resolvedKey = localUniqueId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
	@Override
	public String toString() {
		return "LocalUpdateInfo [localUniqueId=" + localUniqueId
				+ ", localName=" + localName + ", localSubId=" + localSubId
				+ ", localUpdateTime=" + localUpdateTime + ", localState="
				+ localState + ", updateInterfaceInfo=" + updateInterfaceInfo
				+ "]";
	}
    // KEEP METHODS END

}
