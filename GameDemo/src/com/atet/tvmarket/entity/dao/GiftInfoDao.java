package com.atet.tvmarket.entity.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.atet.tvmarket.entity.dao.GiftInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GIFT_INFO.
*/
public class GiftInfoDao extends AbstractDao<GiftInfo, String> {

    public static final String TABLENAME = "GIFT_INFO";

    /**
     * Properties of entity GiftInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property GiftPackageid = new Property(0, String.class, "giftPackageid", true, "GIFT_PACKAGEID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property UseMethod = new Property(2, String.class, "useMethod", false, "USE_METHOD");
        public final static Property Remark = new Property(3, String.class, "remark", false, "REMARK");
        public final static Property StartTime = new Property(4, Long.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(5, Long.class, "endTime", false, "END_TIME");
        public final static Property Number = new Property(6, Integer.class, "number", false, "NUMBER");
        public final static Property GameId = new Property(7, String.class, "gameId", false, "GAME_ID");
    };

    private Query<GiftInfo> gameGiftInfo_GiftDataQuery;

    public GiftInfoDao(DaoConfig config) {
        super(config);
    }
    
    public GiftInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GIFT_INFO' (" + //
                "'GIFT_PACKAGEID' TEXT PRIMARY KEY NOT NULL ," + // 0: giftPackageid
                "'NAME' TEXT," + // 1: name
                "'USE_METHOD' TEXT," + // 2: useMethod
                "'REMARK' TEXT," + // 3: remark
                "'START_TIME' INTEGER," + // 4: startTime
                "'END_TIME' INTEGER," + // 5: endTime
                "'NUMBER' INTEGER," + // 6: number
                "'GAME_ID' TEXT NOT NULL );"); // 7: gameId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GIFT_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GiftInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getGiftPackageid());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String useMethod = entity.getUseMethod();
        if (useMethod != null) {
            stmt.bindString(3, useMethod);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(4, remark);
        }
 
        Long startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(5, startTime);
        }
 
        Long endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(6, endTime);
        }
 
        Integer number = entity.getNumber();
        if (number != null) {
            stmt.bindLong(7, number);
        }
        stmt.bindString(8, entity.getGameId());
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GiftInfo readEntity(Cursor cursor, int offset) {
        GiftInfo entity = new GiftInfo( //
            cursor.getString(offset + 0), // giftPackageid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // useMethod
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // remark
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // startTime
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // endTime
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // number
            cursor.getString(offset + 7) // gameId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GiftInfo entity, int offset) {
        entity.setGiftPackageid(cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUseMethod(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRemark(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStartTime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setEndTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setNumber(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setGameId(cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(GiftInfo entity, long rowId) {
        return entity.getGiftPackageid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(GiftInfo entity) {
        if(entity != null) {
            return entity.getGiftPackageid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "giftData" to-many relationship of GameGiftInfo. */
    public List<GiftInfo> _queryGameGiftInfo_GiftData(String gameId) {
        synchronized (this) {
            if (gameGiftInfo_GiftDataQuery == null) {
                QueryBuilder<GiftInfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.GameId.eq(null));
                gameGiftInfo_GiftDataQuery = queryBuilder.build();
            }
        }
        Query<GiftInfo> query = gameGiftInfo_GiftDataQuery.forCurrentThread();
        query.setParameter(0, gameId);
        return query.list();
    }

}
