package com.atet.tvmarket.entity.dao;

import java.util.List;
import com.atet.tvmarket.entity.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table AD_MODEL_INFO.
 */
public class AdModelInfo implements java.io.Serializable {

    private Long id;
    private String modelId;
    private Long startTime;
    private Long endTime;
    private Long createTime;
    private Long updateTime;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AdModelInfoDao myDao;

    private List<AdInfo> ads;
    private List<ModelToAd> modelToAdList;

    // KEEP FIELDS - put your custom fields here
	private static final long serialVersionUID = 1L;
    // KEEP FIELDS END

    public AdModelInfo() {
    }

    public AdModelInfo(Long id) {
        this.id = id;
    }

    public AdModelInfo(Long id, String modelId, Long startTime, Long endTime, Long createTime, Long updateTime) {
        this.id = id;
        this.modelId = modelId;
        this.startTime = startTime;
        this.endTime = endTime;
        this.createTime = createTime;
        this.updateTime = updateTime;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAdModelInfoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getModelId() {
        return modelId;
    }

    public void setModelId(String modelId) {
        this.modelId = modelId;
    }

    public Long getStartTime() {
        return startTime;
    }

    public void setStartTime(Long startTime) {
        this.startTime = startTime;
    }

    public Long getEndTime() {
        return endTime;
    }

    public void setEndTime(Long endTime) {
        this.endTime = endTime;
    }

    public Long getCreateTime() {
        return createTime;
    }

    public void setCreateTime(Long createTime) {
        this.createTime = createTime;
    }

    public Long getUpdateTime() {
        return updateTime;
    }

    public void setUpdateTime(Long updateTime) {
        this.updateTime = updateTime;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<AdInfo> getAds() {
        if (ads == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AdInfoDao targetDao = daoSession.getAdInfoDao();
            List<AdInfo> adsNew = targetDao._queryAdModelInfo_Ads(id);
            synchronized (this) {
                if(ads == null) {
                    ads = adsNew;
                }
            }
        }
        return ads;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAds() {
        ads = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ModelToAd> getModelToAdList() {
        if (modelToAdList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ModelToAdDao targetDao = daoSession.getModelToAdDao();
            List<ModelToAd> modelToAdListNew = targetDao._queryAdModelInfo_ModelToAdList(id);
            synchronized (this) {
                if(modelToAdList == null) {
                    modelToAdList = modelToAdListNew;
                }
            }
        }
        return modelToAdList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetModelToAdList() {
        modelToAdList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
	@Override
	public String toString() {
		return "AdModelInfo [id=" + id + ", modelId=" + modelId
				+ ", startTime=" + startTime + ", endTime=" + endTime
				+ ", createTime=" + createTime + ", updateTime=" + updateTime
				+ ", ads=" + ads + "]";
	}
    // KEEP METHODS END

}
