package com.atet.tvmarket.entity.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.atet.tvmarket.entity.dao.AdInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table AD_INFO.
*/
public class AdInfoDao extends AbstractDao<AdInfo, String> {

    public static final String TABLENAME = "AD_INFO";

    /**
     * Properties of entity AdInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property AdId = new Property(0, String.class, "adId", true, "AD_ID");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property BackgroundUrl = new Property(2, String.class, "backgroundUrl", false, "BACKGROUND_URL");
        public final static Property VideoUrl = new Property(3, String.class, "videoUrl", false, "VIDEO_URL");
        public final static Property GameId = new Property(4, String.class, "gameId", false, "GAME_ID");
        public final static Property GameName = new Property(5, String.class, "gameName", false, "GAME_NAME");
        public final static Property PackageName = new Property(6, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property Title = new Property(7, String.class, "title", false, "TITLE");
        public final static Property PositionIndex = new Property(8, Integer.class, "positionIndex", false, "POSITION_INDEX");
        public final static Property SizeType = new Property(9, String.class, "sizeType", false, "SIZE_TYPE");
        public final static Property Type = new Property(10, Integer.class, "type", false, "TYPE");
        public final static Property Remark = new Property(11, String.class, "remark", false, "REMARK");
        public final static Property TypeName = new Property(12, String.class, "typeName", false, "TYPE_NAME");
        public final static Property NewGames = new Property(13, Integer.class, "newGames", false, "NEW_GAMES");
        public final static Property HandleType = new Property(14, Integer.class, "handleType", false, "HANDLE_TYPE");
        public final static Property Online = new Property(15, Integer.class, "online", false, "ONLINE");
        public final static Property CornerMark = new Property(16, String.class, "cornerMark", false, "CORNER_MARK");
        public final static Property ActionUrlId = new Property(17, String.class, "actionUrlId", false, "ACTION_URL_ID");
        public final static Property ModelKey = new Property(18, long.class, "modelKey", false, "MODEL_KEY");
    };

    private DaoSession daoSession;

    private Query<AdInfo> adModelInfo_AdsQuery;

    public AdInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AdInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'AD_INFO' (" + //
                "'AD_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: adId
                "'URL' TEXT," + // 1: url
                "'BACKGROUND_URL' TEXT," + // 2: backgroundUrl
                "'VIDEO_URL' TEXT," + // 3: videoUrl
                "'GAME_ID' TEXT," + // 4: gameId
                "'GAME_NAME' TEXT," + // 5: gameName
                "'PACKAGE_NAME' TEXT," + // 6: packageName
                "'TITLE' TEXT," + // 7: title
                "'POSITION_INDEX' INTEGER," + // 8: positionIndex
                "'SIZE_TYPE' TEXT," + // 9: sizeType
                "'TYPE' INTEGER," + // 10: type
                "'REMARK' TEXT," + // 11: remark
                "'TYPE_NAME' TEXT," + // 12: typeName
                "'NEW_GAMES' INTEGER," + // 13: newGames
                "'HANDLE_TYPE' INTEGER," + // 14: handleType
                "'ONLINE' INTEGER," + // 15: online
                "'CORNER_MARK' TEXT," + // 16: cornerMark
                "'ACTION_URL_ID' TEXT NOT NULL ," + // 17: actionUrlId
                "'MODEL_KEY' INTEGER NOT NULL );"); // 18: modelKey
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'AD_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AdInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getAdId());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String backgroundUrl = entity.getBackgroundUrl();
        if (backgroundUrl != null) {
            stmt.bindString(3, backgroundUrl);
        }
 
        String videoUrl = entity.getVideoUrl();
        if (videoUrl != null) {
            stmt.bindString(4, videoUrl);
        }
 
        String gameId = entity.getGameId();
        if (gameId != null) {
            stmt.bindString(5, gameId);
        }
 
        String gameName = entity.getGameName();
        if (gameName != null) {
            stmt.bindString(6, gameName);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(7, packageName);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(8, title);
        }
 
        Integer positionIndex = entity.getPositionIndex();
        if (positionIndex != null) {
            stmt.bindLong(9, positionIndex);
        }
 
        String sizeType = entity.getSizeType();
        if (sizeType != null) {
            stmt.bindString(10, sizeType);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(11, type);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(12, remark);
        }
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(13, typeName);
        }
 
        Integer newGames = entity.getNewGames();
        if (newGames != null) {
            stmt.bindLong(14, newGames);
        }
 
        Integer handleType = entity.getHandleType();
        if (handleType != null) {
            stmt.bindLong(15, handleType);
        }
 
        Integer online = entity.getOnline();
        if (online != null) {
            stmt.bindLong(16, online);
        }
 
        String cornerMark = entity.getCornerMark();
        if (cornerMark != null) {
            stmt.bindString(17, cornerMark);
        }
        stmt.bindString(18, entity.getActionUrlId());
        stmt.bindLong(19, entity.getModelKey());
    }

    @Override
    protected void attachEntity(AdInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AdInfo readEntity(Cursor cursor, int offset) {
        AdInfo entity = new AdInfo( //
            cursor.getString(offset + 0), // adId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // backgroundUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // videoUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // gameId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // gameName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // packageName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // title
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // positionIndex
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // sizeType
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // type
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // remark
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // typeName
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // newGames
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // handleType
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // online
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // cornerMark
            cursor.getString(offset + 17), // actionUrlId
            cursor.getLong(offset + 18) // modelKey
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AdInfo entity, int offset) {
        entity.setAdId(cursor.getString(offset + 0));
        entity.setUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBackgroundUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVideoUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGameId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGameName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPackageName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTitle(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPositionIndex(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setSizeType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setType(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setRemark(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTypeName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setNewGames(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setHandleType(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setOnline(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setCornerMark(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setActionUrlId(cursor.getString(offset + 17));
        entity.setModelKey(cursor.getLong(offset + 18));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(AdInfo entity, long rowId) {
        return entity.getAdId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(AdInfo entity) {
        if(entity != null) {
            return entity.getAdId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "ads" to-many relationship of AdModelInfo. */
    public List<AdInfo> _queryAdModelInfo_Ads(long modelKey) {
        synchronized (this) {
            if (adModelInfo_AdsQuery == null) {
                QueryBuilder<AdInfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ModelKey.eq(null));
                adModelInfo_AdsQuery = queryBuilder.build();
            }
        }
        Query<AdInfo> query = adModelInfo_AdsQuery.forCurrentThread();
        query.setParameter(0, modelKey);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getActionUrlDao().getAllColumns());
            builder.append(" FROM AD_INFO T");
            builder.append(" LEFT JOIN ACTION_URL T0 ON T.'ACTION_URL_ID'=T0.'AD_ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected AdInfo loadCurrentDeep(Cursor cursor, boolean lock) {
        AdInfo entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ActionUrl actionUrl = loadCurrentOther(daoSession.getActionUrlDao(), cursor, offset);
         if(actionUrl != null) {
            entity.setActionUrl(actionUrl);
        }

        return entity;    
    }

    public AdInfo loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<AdInfo> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<AdInfo> list = new ArrayList<AdInfo>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<AdInfo> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<AdInfo> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
