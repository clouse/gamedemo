package com.atet.tvmarket.entity.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.atet.tvmarket.entity.dao.ActDetailPhoto;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ACT_DETAIL_PHOTO.
*/
public class ActDetailPhotoDao extends AbstractDao<ActDetailPhoto, Long> {

    public static final String TABLENAME = "ACT_DETAIL_PHOTO";

    /**
     * Properties of entity ActDetailPhoto.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Picture = new Property(1, String.class, "picture", false, "PICTURE");
        public final static Property ActivityId = new Property(2, String.class, "activityId", false, "ACTIVITY_ID");
    };

    private Query<ActDetailPhoto> actInfo_DetailPhotosQuery;

    public ActDetailPhotoDao(DaoConfig config) {
        super(config);
    }
    
    public ActDetailPhotoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ACT_DETAIL_PHOTO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PICTURE' TEXT," + // 1: picture
                "'ACTIVITY_ID' TEXT NOT NULL );"); // 2: activityId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ACT_DETAIL_PHOTO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ActDetailPhoto entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(2, picture);
        }
        stmt.bindString(3, entity.getActivityId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ActDetailPhoto readEntity(Cursor cursor, int offset) {
        ActDetailPhoto entity = new ActDetailPhoto( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // picture
            cursor.getString(offset + 2) // activityId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ActDetailPhoto entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPicture(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setActivityId(cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ActDetailPhoto entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ActDetailPhoto entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "detailPhotos" to-many relationship of ActInfo. */
    public List<ActDetailPhoto> _queryActInfo_DetailPhotos(String activityId) {
        synchronized (this) {
            if (actInfo_DetailPhotosQuery == null) {
                QueryBuilder<ActDetailPhoto> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ActivityId.eq(null));
                actInfo_DetailPhotosQuery = queryBuilder.build();
            }
        }
        Query<ActDetailPhoto> query = actInfo_DetailPhotosQuery.forCurrentThread();
        query.setParameter(0, activityId);
        return query.list();
    }

}
