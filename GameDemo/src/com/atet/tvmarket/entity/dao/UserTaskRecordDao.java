package com.atet.tvmarket.entity.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.atet.tvmarket.entity.dao.UserTaskRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER_TASK_RECORD.
*/
public class UserTaskRecordDao extends AbstractDao<UserTaskRecord, Long> {

    public static final String TABLENAME = "USER_TASK_RECORD";

    /**
     * Properties of entity UserTaskRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property UserId = new Property(2, Integer.class, "userId", false, "USER_ID");
        public final static Property GameId = new Property(3, String.class, "gameId", false, "GAME_ID");
        public final static Property Time = new Property(4, Long.class, "time", false, "TIME");
        public final static Property Str1 = new Property(5, String.class, "str1", false, "STR1");
        public final static Property Str2 = new Property(6, String.class, "str2", false, "STR2");
        public final static Property Int1 = new Property(7, Integer.class, "int1", false, "INT1");
        public final static Property Int2 = new Property(8, Integer.class, "int2", false, "INT2");
    };


    public UserTaskRecordDao(DaoConfig config) {
        super(config);
    }
    
    public UserTaskRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER_TASK_RECORD' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TYPE' TEXT," + // 1: type
                "'USER_ID' INTEGER," + // 2: userId
                "'GAME_ID' TEXT," + // 3: gameId
                "'TIME' INTEGER," + // 4: time
                "'STR1' TEXT," + // 5: str1
                "'STR2' TEXT," + // 6: str2
                "'INT1' INTEGER," + // 7: int1
                "'INT2' INTEGER);"); // 8: int2
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER_TASK_RECORD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserTaskRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(3, userId);
        }
 
        String gameId = entity.getGameId();
        if (gameId != null) {
            stmt.bindString(4, gameId);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(5, time);
        }
 
        String str1 = entity.getStr1();
        if (str1 != null) {
            stmt.bindString(6, str1);
        }
 
        String str2 = entity.getStr2();
        if (str2 != null) {
            stmt.bindString(7, str2);
        }
 
        Integer int1 = entity.getInt1();
        if (int1 != null) {
            stmt.bindLong(8, int1);
        }
 
        Integer int2 = entity.getInt2();
        if (int2 != null) {
            stmt.bindLong(9, int2);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserTaskRecord readEntity(Cursor cursor, int offset) {
        UserTaskRecord entity = new UserTaskRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // gameId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // str1
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // str2
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // int1
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // int2
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserTaskRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setGameId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setStr1(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStr2(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setInt1(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setInt2(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserTaskRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserTaskRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
