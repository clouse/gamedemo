package com.atet.tvmarket.entity.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.atet.tvmarket.entity.dao.GameSearchPinyinInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GAME_SEARCH_PINYIN_INFO.
*/
public class GameSearchPinyinInfoDao extends AbstractDao<GameSearchPinyinInfo, Long> {

    public static final String TABLENAME = "GAME_SEARCH_PINYIN_INFO";

    /**
     * Properties of entity GameSearchPinyinInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property GameId = new Property(1, String.class, "gameId", false, "GAME_ID");
        public final static Property GameName = new Property(2, String.class, "gameName", false, "GAME_NAME");
        public final static Property Pinyin = new Property(3, String.class, "pinyin", false, "PINYIN");
        public final static Property DownCount = new Property(4, Integer.class, "downCount", false, "DOWN_COUNT");
        public final static Property StarLevel = new Property(5, Double.class, "starLevel", false, "STAR_LEVEL");
        public final static Property Icon = new Property(6, String.class, "icon", false, "ICON");
        public final static Property GameSize = new Property(7, Integer.class, "gameSize", false, "GAME_SIZE");
        public final static Property File = new Property(8, String.class, "file", false, "FILE");
        public final static Property AppendixZip = new Property(9, String.class, "appendixZip", false, "APPENDIX_ZIP");
        public final static Property Type = new Property(10, Integer.class, "type", false, "TYPE");
    };


    public GameSearchPinyinInfoDao(DaoConfig config) {
        super(config);
    }
    
    public GameSearchPinyinInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GAME_SEARCH_PINYIN_INFO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'GAME_ID' TEXT," + // 1: gameId
                "'GAME_NAME' TEXT," + // 2: gameName
                "'PINYIN' TEXT," + // 3: pinyin
                "'DOWN_COUNT' INTEGER," + // 4: downCount
                "'STAR_LEVEL' REAL," + // 5: starLevel
                "'ICON' TEXT," + // 6: icon
                "'GAME_SIZE' INTEGER," + // 7: gameSize
                "'FILE' TEXT," + // 8: file
                "'APPENDIX_ZIP' TEXT," + // 9: appendixZip
                "'TYPE' INTEGER);"); // 10: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GAME_SEARCH_PINYIN_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GameSearchPinyinInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String gameId = entity.getGameId();
        if (gameId != null) {
            stmt.bindString(2, gameId);
        }
 
        String gameName = entity.getGameName();
        if (gameName != null) {
            stmt.bindString(3, gameName);
        }
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(4, pinyin);
        }
 
        Integer downCount = entity.getDownCount();
        if (downCount != null) {
            stmt.bindLong(5, downCount);
        }
 
        Double starLevel = entity.getStarLevel();
        if (starLevel != null) {
            stmt.bindDouble(6, starLevel);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(7, icon);
        }
 
        Integer gameSize = entity.getGameSize();
        if (gameSize != null) {
            stmt.bindLong(8, gameSize);
        }
 
        String file = entity.getFile();
        if (file != null) {
            stmt.bindString(9, file);
        }
 
        String appendixZip = entity.getAppendixZip();
        if (appendixZip != null) {
            stmt.bindString(10, appendixZip);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(11, type);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GameSearchPinyinInfo readEntity(Cursor cursor, int offset) {
        GameSearchPinyinInfo entity = new GameSearchPinyinInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // gameId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // gameName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pinyin
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // downCount
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // starLevel
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // icon
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // gameSize
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // file
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // appendixZip
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10) // type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GameSearchPinyinInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGameId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGameName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPinyin(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDownCount(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setStarLevel(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setIcon(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGameSize(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setFile(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAppendixZip(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setType(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GameSearchPinyinInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GameSearchPinyinInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
