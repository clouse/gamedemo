package com.atet.tvmarket.entity.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.atet.tvmarket.entity.dao.VideoInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table VIDEO_INFO.
*/
public class VideoInfoDao extends AbstractDao<VideoInfo, Long> {

    public static final String TABLENAME = "VIDEO_INFO";

    /**
     * Properties of entity VideoInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property VideoName = new Property(1, String.class, "videoName", false, "VIDEO_NAME");
        public final static Property VideoUrl = new Property(2, String.class, "videoUrl", false, "VIDEO_URL");
        public final static Property VideoIcon = new Property(3, String.class, "videoIcon", false, "VIDEO_ICON");
        public final static Property VideoBgIcon = new Property(4, String.class, "videoBgIcon", false, "VIDEO_BG_ICON");
        public final static Property VideoRemark = new Property(5, String.class, "videoRemark", false, "VIDEO_REMARK");
        public final static Property VideoType = new Property(6, String.class, "videoType", false, "VIDEO_TYPE");
    };


    public VideoInfoDao(DaoConfig config) {
        super(config);
    }
    
    public VideoInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'VIDEO_INFO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'VIDEO_NAME' TEXT," + // 1: videoName
                "'VIDEO_URL' TEXT," + // 2: videoUrl
                "'VIDEO_ICON' TEXT," + // 3: videoIcon
                "'VIDEO_BG_ICON' TEXT," + // 4: videoBgIcon
                "'VIDEO_REMARK' TEXT," + // 5: videoRemark
                "'VIDEO_TYPE' TEXT);"); // 6: videoType
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'VIDEO_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, VideoInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String videoName = entity.getVideoName();
        if (videoName != null) {
            stmt.bindString(2, videoName);
        }
 
        String videoUrl = entity.getVideoUrl();
        if (videoUrl != null) {
            stmt.bindString(3, videoUrl);
        }
 
        String videoIcon = entity.getVideoIcon();
        if (videoIcon != null) {
            stmt.bindString(4, videoIcon);
        }
 
        String videoBgIcon = entity.getVideoBgIcon();
        if (videoBgIcon != null) {
            stmt.bindString(5, videoBgIcon);
        }
 
        String videoRemark = entity.getVideoRemark();
        if (videoRemark != null) {
            stmt.bindString(6, videoRemark);
        }
 
        String videoType = entity.getVideoType();
        if (videoType != null) {
            stmt.bindString(7, videoType);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public VideoInfo readEntity(Cursor cursor, int offset) {
        VideoInfo entity = new VideoInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // videoName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // videoUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // videoIcon
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // videoBgIcon
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // videoRemark
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // videoType
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, VideoInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVideoName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVideoUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVideoIcon(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVideoBgIcon(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVideoRemark(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVideoType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(VideoInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(VideoInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
