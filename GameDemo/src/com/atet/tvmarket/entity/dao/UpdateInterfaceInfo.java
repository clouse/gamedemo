package com.atet.tvmarket.entity.dao;

import com.atet.tvmarket.entity.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.atet.tvmarket.entity.UpdateInterfaceInner;
import java.util.List;
// KEEP INCLUDES END
/**
 * Entity mapped to table UPDATE_INTERFACE_INFO.
 */
public class UpdateInterfaceInfo implements java.io.Serializable {

    private String uniqueId;
    private String name;
    private String subId;
    private Long updateTime;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UpdateInterfaceInfoDao myDao;

    private LocalUpdateInfo localUpdateInfo;
    private String localUpdateInfo__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    private List<UpdateInterfaceInner> types;
    // KEEP FIELDS END

    public UpdateInterfaceInfo() {
    }

    public UpdateInterfaceInfo(String uniqueId) {
        this.uniqueId = uniqueId;
    }

    public UpdateInterfaceInfo(String uniqueId, String name, String subId, Long updateTime) {
        this.uniqueId = uniqueId;
        this.name = name;
        this.subId = subId;
        this.updateTime = updateTime;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUpdateInterfaceInfoDao() : null;
    }

    public String getUniqueId() {
        return uniqueId;
    }

    public void setUniqueId(String uniqueId) {
        this.uniqueId = uniqueId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSubId() {
        return subId;
    }

    public void setSubId(String subId) {
        this.subId = subId;
    }

    public Long getUpdateTime() {
        return updateTime;
    }

    public void setUpdateTime(Long updateTime) {
        this.updateTime = updateTime;
    }

    /** To-one relationship, resolved on first access. */
    public LocalUpdateInfo getLocalUpdateInfo() {
        String __key = this.uniqueId;
        if (localUpdateInfo__resolvedKey == null || localUpdateInfo__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LocalUpdateInfoDao targetDao = daoSession.getLocalUpdateInfoDao();
            LocalUpdateInfo localUpdateInfoNew = targetDao.load(__key);
            synchronized (this) {
                localUpdateInfo = localUpdateInfoNew;
            	localUpdateInfo__resolvedKey = __key;
            }
        }
        return localUpdateInfo;
    }

    public void setLocalUpdateInfo(LocalUpdateInfo localUpdateInfo) {
        synchronized (this) {
            this.localUpdateInfo = localUpdateInfo;
            uniqueId = localUpdateInfo == null ? null : localUpdateInfo.getLocalUniqueId();
            localUpdateInfo__resolvedKey = uniqueId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
	public List<UpdateInterfaceInner> getTypes() {
		return types;
	}

	public void setTypes(List<UpdateInterfaceInner> types) {
		this.types = types;
	}

	@Override
	public String toString() {
		return "UpdateInterfaceInfo [uniqueId=" + uniqueId + ", name=" + name
				+ ", subId=" + subId + ", updateTime=" + updateTime
				+ ", localUpdateInfo=" + localUpdateInfo
				+ ", localUpdateInfo__resolvedKey="
				+ localUpdateInfo__resolvedKey + ", types=" + types + "]";
	}
    // KEEP METHODS END

}
