package com.atet.tvmarket.entity.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.atet.tvmarket.entity.dao.GameTypeInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GAME_TYPE_INFO.
*/
public class GameTypeInfoDao extends AbstractDao<GameTypeInfo, String> {

    public static final String TABLENAME = "GAME_TYPE_INFO";

    /**
     * Properties of entity GameTypeInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property TypeId = new Property(0, String.class, "typeId", true, "TYPE_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Icon = new Property(2, String.class, "icon", false, "ICON");
        public final static Property Remark = new Property(3, String.class, "remark", false, "REMARK");
        public final static Property OrderNum = new Property(4, Integer.class, "orderNum", false, "ORDER_NUM");
        public final static Property CreateTime = new Property(5, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(6, Long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property Games = new Property(7, Integer.class, "games", false, "GAMES");
    };

    private DaoSession daoSession;


    public GameTypeInfoDao(DaoConfig config) {
        super(config);
    }
    
    public GameTypeInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GAME_TYPE_INFO' (" + //
                "'TYPE_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: typeId
                "'NAME' TEXT," + // 1: name
                "'ICON' TEXT," + // 2: icon
                "'REMARK' TEXT," + // 3: remark
                "'ORDER_NUM' INTEGER," + // 4: orderNum
                "'CREATE_TIME' INTEGER," + // 5: createTime
                "'UPDATE_TIME' INTEGER," + // 6: updateTime
                "'GAMES' INTEGER);"); // 7: games
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GAME_TYPE_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GameTypeInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getTypeId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(3, icon);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(4, remark);
        }
 
        Integer orderNum = entity.getOrderNum();
        if (orderNum != null) {
            stmt.bindLong(5, orderNum);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(6, createTime);
        }
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(7, updateTime);
        }
 
        Integer games = entity.getGames();
        if (games != null) {
            stmt.bindLong(8, games);
        }
    }

    @Override
    protected void attachEntity(GameTypeInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GameTypeInfo readEntity(Cursor cursor, int offset) {
        GameTypeInfo entity = new GameTypeInfo( //
            cursor.getString(offset + 0), // typeId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // icon
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // remark
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // orderNum
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // createTime
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // updateTime
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // games
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GameTypeInfo entity, int offset) {
        entity.setTypeId(cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIcon(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRemark(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOrderNum(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setCreateTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setUpdateTime(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setGames(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(GameTypeInfo entity, long rowId) {
        return entity.getTypeId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(GameTypeInfo entity) {
        if(entity != null) {
            return entity.getTypeId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
