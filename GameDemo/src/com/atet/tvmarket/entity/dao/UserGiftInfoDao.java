package com.atet.tvmarket.entity.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.atet.tvmarket.entity.dao.UserGiftInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER_GIFT_INFO.
*/
public class UserGiftInfoDao extends AbstractDao<UserGiftInfo, String> {

    public static final String TABLENAME = "USER_GIFT_INFO";

    /**
     * Properties of entity UserGiftInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property GiftPackageid = new Property(0, String.class, "giftPackageid", true, "GIFT_PACKAGEID");
        public final static Property GiftCode = new Property(1, String.class, "giftCode", false, "GIFT_CODE");
        public final static Property Icon = new Property(2, String.class, "icon", false, "ICON");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property GameName = new Property(4, String.class, "gameName", false, "GAME_NAME");
        public final static Property GameId = new Property(5, String.class, "gameId", false, "GAME_ID");
        public final static Property Content = new Property(6, String.class, "content", false, "CONTENT");
        public final static Property UseMethod = new Property(7, String.class, "useMethod", false, "USE_METHOD");
        public final static Property ReceiveTime = new Property(8, Long.class, "receiveTime", false, "RECEIVE_TIME");
    };


    public UserGiftInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserGiftInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER_GIFT_INFO' (" + //
                "'GIFT_PACKAGEID' TEXT PRIMARY KEY NOT NULL ," + // 0: giftPackageid
                "'GIFT_CODE' TEXT," + // 1: giftCode
                "'ICON' TEXT," + // 2: icon
                "'NAME' TEXT," + // 3: name
                "'GAME_NAME' TEXT," + // 4: gameName
                "'GAME_ID' TEXT," + // 5: gameId
                "'CONTENT' TEXT," + // 6: content
                "'USE_METHOD' TEXT," + // 7: useMethod
                "'RECEIVE_TIME' INTEGER);"); // 8: receiveTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER_GIFT_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserGiftInfo entity) {
        stmt.clearBindings();
 
        String giftPackageid = entity.getGiftPackageid();
        if (giftPackageid != null) {
            stmt.bindString(1, giftPackageid);
        }
 
        String giftCode = entity.getGiftCode();
        if (giftCode != null) {
            stmt.bindString(2, giftCode);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(3, icon);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String gameName = entity.getGameName();
        if (gameName != null) {
            stmt.bindString(5, gameName);
        }
 
        String gameId = entity.getGameId();
        if (gameId != null) {
            stmt.bindString(6, gameId);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
 
        String useMethod = entity.getUseMethod();
        if (useMethod != null) {
            stmt.bindString(8, useMethod);
        }
 
        Long receiveTime = entity.getReceiveTime();
        if (receiveTime != null) {
            stmt.bindLong(9, receiveTime);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserGiftInfo readEntity(Cursor cursor, int offset) {
        UserGiftInfo entity = new UserGiftInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // giftPackageid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // giftCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // icon
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // gameName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // gameId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // content
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // useMethod
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // receiveTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserGiftInfo entity, int offset) {
        entity.setGiftPackageid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGiftCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIcon(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGameName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGameId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUseMethod(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setReceiveTime(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(UserGiftInfo entity, long rowId) {
        return entity.getGiftPackageid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(UserGiftInfo entity) {
        if(entity != null) {
            return entity.getGiftPackageid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
