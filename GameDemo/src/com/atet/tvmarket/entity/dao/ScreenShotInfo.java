package com.atet.tvmarket.entity.dao;

import com.atet.tvmarket.entity.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table SCREEN_SHOT_INFO.
 */
public class ScreenShotInfo implements java.io.Serializable {

    private Long id;
    private String photoUrl;
    private Integer type;
    private Integer number;
    /** Not-null value. */
    private String gameId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ScreenShotInfoDao myDao;

    private GameInfo gameInfo;
    private String gameInfo__resolvedKey;


    // KEEP FIELDS - put your custom fields here
	private static final long serialVersionUID = 1L;
    // KEEP FIELDS END

    public ScreenShotInfo() {
    }

    public ScreenShotInfo(Long id) {
        this.id = id;
    }

    public ScreenShotInfo(Long id, String photoUrl, Integer type, Integer number, String gameId) {
        this.id = id;
        this.photoUrl = photoUrl;
        this.type = type;
        this.number = number;
        this.gameId = gameId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getScreenShotInfoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getPhotoUrl() {
        return photoUrl;
    }

    public void setPhotoUrl(String photoUrl) {
        this.photoUrl = photoUrl;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public Integer getNumber() {
        return number;
    }

    public void setNumber(Integer number) {
        this.number = number;
    }

    /** Not-null value. */
    public String getGameId() {
        return gameId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setGameId(String gameId) {
        this.gameId = gameId;
    }

    /** To-one relationship, resolved on first access. */
    public GameInfo getGameInfo() {
        String __key = this.gameId;
        if (gameInfo__resolvedKey == null || gameInfo__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GameInfoDao targetDao = daoSession.getGameInfoDao();
            GameInfo gameInfoNew = targetDao.load(__key);
            synchronized (this) {
                gameInfo = gameInfoNew;
            	gameInfo__resolvedKey = __key;
            }
        }
        return gameInfo;
    }

    public void setGameInfo(GameInfo gameInfo) {
        if (gameInfo == null) {
            throw new DaoException("To-one property 'gameId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.gameInfo = gameInfo;
            gameId = gameInfo.getGameId();
            gameInfo__resolvedKey = gameId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
	@Override
	public String toString() {
		return "ScreenShotInfo [id=" + id + ", photoUrl=" + photoUrl
				+ ", type=" + type + ", number=" + number + ", gameId="
				+ gameId + "]";
	}
    // KEEP METHODS END

}
