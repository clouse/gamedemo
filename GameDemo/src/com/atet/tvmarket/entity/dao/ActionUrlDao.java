package com.atet.tvmarket.entity.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.atet.tvmarket.entity.dao.ActionUrl;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ACTION_URL.
*/
public class ActionUrlDao extends AbstractDao<ActionUrl, String> {

    public static final String TABLENAME = "ACTION_URL";

    /**
     * Properties of entity ActionUrl.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Behavior = new Property(0, String.class, "behavior", false, "BEHAVIOR");
        public final static Property Action = new Property(1, String.class, "action", false, "ACTION");
        public final static Property Packagename = new Property(2, String.class, "packagename", false, "PACKAGENAME");
        public final static Property Activityname = new Property(3, String.class, "activityname", false, "ACTIVITYNAME");
        public final static Property AdId = new Property(4, String.class, "adId", true, "AD_ID");
    };

    private DaoSession daoSession;


    public ActionUrlDao(DaoConfig config) {
        super(config);
    }
    
    public ActionUrlDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ACTION_URL' (" + //
                "'BEHAVIOR' TEXT," + // 0: behavior
                "'ACTION' TEXT," + // 1: action
                "'PACKAGENAME' TEXT," + // 2: packagename
                "'ACTIVITYNAME' TEXT," + // 3: activityname
                "'AD_ID' TEXT PRIMARY KEY NOT NULL );"); // 4: adId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ACTION_URL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ActionUrl entity) {
        stmt.clearBindings();
 
        String behavior = entity.getBehavior();
        if (behavior != null) {
            stmt.bindString(1, behavior);
        }
 
        String action = entity.getAction();
        if (action != null) {
            stmt.bindString(2, action);
        }
 
        String packagename = entity.getPackagename();
        if (packagename != null) {
            stmt.bindString(3, packagename);
        }
 
        String activityname = entity.getActivityname();
        if (activityname != null) {
            stmt.bindString(4, activityname);
        }
        stmt.bindString(5, entity.getAdId());
    }

    @Override
    protected void attachEntity(ActionUrl entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 4);
    }    

    /** @inheritdoc */
    @Override
    public ActionUrl readEntity(Cursor cursor, int offset) {
        ActionUrl entity = new ActionUrl( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // behavior
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // action
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // packagename
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // activityname
            cursor.getString(offset + 4) // adId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ActionUrl entity, int offset) {
        entity.setBehavior(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAction(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPackagename(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setActivityname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAdId(cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(ActionUrl entity, long rowId) {
        return entity.getAdId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(ActionUrl entity) {
        if(entity != null) {
            return entity.getAdId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
