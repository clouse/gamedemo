package com.atet.tvmarket.entity.dao;

import com.atet.tvmarket.entity.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table EXTRAMAP.
 */
public class Extramap implements java.io.Serializable {

    private Long id;
    private String key;
    private String value;
    private String type;
    /** Not-null value. */
    private String actionUrlId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ExtramapDao myDao;

    private ActionUrl actionUrl;
    private String actionUrl__resolvedKey;


    // KEEP FIELDS - put your custom fields here
	private static final long serialVersionUID = 1L;
    // KEEP FIELDS END

    public Extramap() {
    }

    public Extramap(Long id) {
        this.id = id;
    }

    public Extramap(Long id, String key, String value, String type, String actionUrlId) {
        this.id = id;
        this.key = key;
        this.value = value;
        this.type = type;
        this.actionUrlId = actionUrlId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getExtramapDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getKey() {
        return key;
    }

    public void setKey(String key) {
        this.key = key;
    }

    public String getValue() {
        return value;
    }

    public void setValue(String value) {
        this.value = value;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    /** Not-null value. */
    public String getActionUrlId() {
        return actionUrlId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setActionUrlId(String actionUrlId) {
        this.actionUrlId = actionUrlId;
    }

    /** To-one relationship, resolved on first access. */
    public ActionUrl getActionUrl() {
        String __key = this.actionUrlId;
        if (actionUrl__resolvedKey == null || actionUrl__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ActionUrlDao targetDao = daoSession.getActionUrlDao();
            ActionUrl actionUrlNew = targetDao.load(__key);
            synchronized (this) {
                actionUrl = actionUrlNew;
            	actionUrl__resolvedKey = __key;
            }
        }
        return actionUrl;
    }

    public void setActionUrl(ActionUrl actionUrl) {
        if (actionUrl == null) {
            throw new DaoException("To-one property 'actionUrlId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.actionUrl = actionUrl;
            actionUrlId = actionUrl.getAdId();
            actionUrl__resolvedKey = actionUrlId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
	@Override
	public String toString() {
		return "Extramap [id=" + id + ", key=" + key + ", value=" + value
				+ ", type=" + type + ", actionUrlId=" + actionUrlId
				+ ", actionUrl=" + actionUrl + "]";
	}
    // KEEP METHODS END

}
