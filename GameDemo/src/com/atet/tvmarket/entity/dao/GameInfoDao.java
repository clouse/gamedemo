package com.atet.tvmarket.entity.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.atet.tvmarket.entity.dao.GameInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GAME_INFO.
*/
public class GameInfoDao extends AbstractDao<GameInfo, String> {

    public static final String TABLENAME = "GAME_INFO";

    /**
     * Properties of entity GameInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property GameId = new Property(0, String.class, "gameId", true, "GAME_ID");
        public final static Property GameName = new Property(1, String.class, "gameName", false, "GAME_NAME");
        public final static Property CpId = new Property(2, String.class, "cpId", false, "CP_ID");
        public final static Property File = new Property(3, String.class, "file", false, "FILE");
        public final static Property MaxPhoto = new Property(4, String.class, "maxPhoto", false, "MAX_PHOTO");
        public final static Property MiddlePhoto = new Property(5, String.class, "middlePhoto", false, "MIDDLE_PHOTO");
        public final static Property MinPhoto = new Property(6, String.class, "minPhoto", false, "MIN_PHOTO");
        public final static Property ErectPhoto = new Property(7, String.class, "erectPhoto", false, "ERECT_PHOTO");
        public final static Property FitAge = new Property(8, Integer.class, "fitAge", false, "FIT_AGE");
        public final static Property StartLevel = new Property(9, Double.class, "startLevel", false, "START_LEVEL");
        public final static Property GameDownCount = new Property(10, Integer.class, "gameDownCount", false, "GAME_DOWN_COUNT");
        public final static Property GameSize = new Property(11, Integer.class, "gameSize", false, "GAME_SIZE");
        public final static Property GamePrice = new Property(12, Integer.class, "gamePrice", false, "GAME_PRICE");
        public final static Property Remark = new Property(13, String.class, "remark", false, "REMARK");
        public final static Property AppendixZip = new Property(14, String.class, "appendixZip", false, "APPENDIX_ZIP");
        public final static Property CreateTime = new Property(15, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(16, Long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property PackageName = new Property(17, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property VersionName = new Property(18, String.class, "versionName", false, "VERSION_NAME");
        public final static Property VersionCode = new Property(19, Integer.class, "versionCode", false, "VERSION_CODE");
        public final static Property HandleType = new Property(20, Integer.class, "handleType", false, "HANDLE_TYPE");
        public final static Property IsGood = new Property(21, Integer.class, "isGood", false, "IS_GOOD");
        public final static Property ShortNo = new Property(22, Double.class, "shortNo", false, "SHORT_NO");
        public final static Property TypeId = new Property(23, String.class, "typeId", false, "TYPE_ID");
        public final static Property TypeName = new Property(24, String.class, "typeName", false, "TYPE_NAME");
        public final static Property MidDownAdress = new Property(25, String.class, "midDownAdress", false, "MID_DOWN_ADRESS");
        public final static Property DownToken = new Property(26, Integer.class, "downToken", false, "DOWN_TOKEN");
        public final static Property GameType = new Property(27, Integer.class, "gameType", false, "GAME_TYPE");
    };

    private DaoSession daoSession;


    public GameInfoDao(DaoConfig config) {
        super(config);
    }
    
    public GameInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GAME_INFO' (" + //
                "'GAME_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: gameId
                "'GAME_NAME' TEXT," + // 1: gameName
                "'CP_ID' TEXT," + // 2: cpId
                "'FILE' TEXT," + // 3: file
                "'MAX_PHOTO' TEXT," + // 4: maxPhoto
                "'MIDDLE_PHOTO' TEXT," + // 5: middlePhoto
                "'MIN_PHOTO' TEXT," + // 6: minPhoto
                "'ERECT_PHOTO' TEXT," + // 7: erectPhoto
                "'FIT_AGE' INTEGER," + // 8: fitAge
                "'START_LEVEL' REAL," + // 9: startLevel
                "'GAME_DOWN_COUNT' INTEGER," + // 10: gameDownCount
                "'GAME_SIZE' INTEGER," + // 11: gameSize
                "'GAME_PRICE' INTEGER," + // 12: gamePrice
                "'REMARK' TEXT," + // 13: remark
                "'APPENDIX_ZIP' TEXT," + // 14: appendixZip
                "'CREATE_TIME' INTEGER," + // 15: createTime
                "'UPDATE_TIME' INTEGER," + // 16: updateTime
                "'PACKAGE_NAME' TEXT," + // 17: packageName
                "'VERSION_NAME' TEXT," + // 18: versionName
                "'VERSION_CODE' INTEGER," + // 19: versionCode
                "'HANDLE_TYPE' INTEGER," + // 20: handleType
                "'IS_GOOD' INTEGER," + // 21: isGood
                "'SHORT_NO' REAL," + // 22: shortNo
                "'TYPE_ID' TEXT," + // 23: typeId
                "'TYPE_NAME' TEXT," + // 24: typeName
                "'MID_DOWN_ADRESS' TEXT," + // 25: midDownAdress
                "'DOWN_TOKEN' INTEGER," + // 26: downToken
                "'GAME_TYPE' INTEGER);"); // 27: gameType
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GAME_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GameInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getGameId());
 
        String gameName = entity.getGameName();
        if (gameName != null) {
            stmt.bindString(2, gameName);
        }
 
        String cpId = entity.getCpId();
        if (cpId != null) {
            stmt.bindString(3, cpId);
        }
 
        String file = entity.getFile();
        if (file != null) {
            stmt.bindString(4, file);
        }
 
        String maxPhoto = entity.getMaxPhoto();
        if (maxPhoto != null) {
            stmt.bindString(5, maxPhoto);
        }
 
        String middlePhoto = entity.getMiddlePhoto();
        if (middlePhoto != null) {
            stmt.bindString(6, middlePhoto);
        }
 
        String minPhoto = entity.getMinPhoto();
        if (minPhoto != null) {
            stmt.bindString(7, minPhoto);
        }
 
        String erectPhoto = entity.getErectPhoto();
        if (erectPhoto != null) {
            stmt.bindString(8, erectPhoto);
        }
 
        Integer fitAge = entity.getFitAge();
        if (fitAge != null) {
            stmt.bindLong(9, fitAge);
        }
 
        Double startLevel = entity.getStartLevel();
        if (startLevel != null) {
            stmt.bindDouble(10, startLevel);
        }
 
        Integer gameDownCount = entity.getGameDownCount();
        if (gameDownCount != null) {
            stmt.bindLong(11, gameDownCount);
        }
 
        Integer gameSize = entity.getGameSize();
        if (gameSize != null) {
            stmt.bindLong(12, gameSize);
        }
 
        Integer gamePrice = entity.getGamePrice();
        if (gamePrice != null) {
            stmt.bindLong(13, gamePrice);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(14, remark);
        }
 
        String appendixZip = entity.getAppendixZip();
        if (appendixZip != null) {
            stmt.bindString(15, appendixZip);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(16, createTime);
        }
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(17, updateTime);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(18, packageName);
        }
 
        String versionName = entity.getVersionName();
        if (versionName != null) {
            stmt.bindString(19, versionName);
        }
 
        Integer versionCode = entity.getVersionCode();
        if (versionCode != null) {
            stmt.bindLong(20, versionCode);
        }
 
        Integer handleType = entity.getHandleType();
        if (handleType != null) {
            stmt.bindLong(21, handleType);
        }
 
        Integer isGood = entity.getIsGood();
        if (isGood != null) {
            stmt.bindLong(22, isGood);
        }
 
        Double shortNo = entity.getShortNo();
        if (shortNo != null) {
            stmt.bindDouble(23, shortNo);
        }
 
        String typeId = entity.getTypeId();
        if (typeId != null) {
            stmt.bindString(24, typeId);
        }
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(25, typeName);
        }
 
        String midDownAdress = entity.getMidDownAdress();
        if (midDownAdress != null) {
            stmt.bindString(26, midDownAdress);
        }
 
        Integer downToken = entity.getDownToken();
        if (downToken != null) {
            stmt.bindLong(27, downToken);
        }
 
        Integer gameType = entity.getGameType();
        if (gameType != null) {
            stmt.bindLong(28, gameType);
        }
    }

    @Override
    protected void attachEntity(GameInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GameInfo readEntity(Cursor cursor, int offset) {
        GameInfo entity = new GameInfo( //
            cursor.getString(offset + 0), // gameId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // gameName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cpId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // file
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // maxPhoto
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // middlePhoto
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // minPhoto
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // erectPhoto
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // fitAge
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // startLevel
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // gameDownCount
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // gameSize
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // gamePrice
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // remark
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // appendixZip
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // createTime
            cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16), // updateTime
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // packageName
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // versionName
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // versionCode
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // handleType
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // isGood
            cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22), // shortNo
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // typeId
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // typeName
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // midDownAdress
            cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26), // downToken
            cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27) // gameType
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GameInfo entity, int offset) {
        entity.setGameId(cursor.getString(offset + 0));
        entity.setGameName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCpId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFile(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMaxPhoto(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMiddlePhoto(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMinPhoto(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setErectPhoto(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFitAge(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setStartLevel(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setGameDownCount(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setGameSize(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setGamePrice(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setRemark(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setAppendixZip(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCreateTime(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setUpdateTime(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
        entity.setPackageName(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setVersionName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setVersionCode(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setHandleType(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setIsGood(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setShortNo(cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22));
        entity.setTypeId(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setTypeName(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setMidDownAdress(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setDownToken(cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26));
        entity.setGameType(cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(GameInfo entity, long rowId) {
        return entity.getGameId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(GameInfo entity) {
        if(entity != null) {
            return entity.getGameId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
